<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac执行npm命令出现的问题</title>
    <url>/2019/12/20/Mac%E6%89%A7%E8%A1%8Cnpm%E5%91%BD%E4%BB%A4%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文记录了我的Mac使用npm安装插件出现的问题及解决方案</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>今天对之前hexo搭建的博客进行一些主题的修改，用到命令<code>npm install hexo-generator-searchdb --save</code>安装搜索插件出现问题，报错，<code>gyp: No Xcode or CLT version detected!</code> 如下图：</p>
<a id="more"></a> 
<p><img src="/images/mac/errorinfo.png" alt="error"></p>
<h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><p>百度发现是缺了Xcode的CLI工具，于是执行下面的命令进行安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo xcode-select --install</span><br></pre></td></tr></table></figure>
<p>但是依然报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xcode-select: error: command line tools are already installed, use &quot;Software Update&quot; to install updates</span><br></pre></td></tr></table></figure>
<p>提示CLI已经安装。百度到CommandLineTools的路径进行查看，发现的却有相关文件，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># CommandLineTools的路径</span><br><span class="line">/Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure>
<p>查阅一些资料后发现多篇文章提到应用文件夹下的<code>Xcode.app</code>，突然想起好像是因为没装Xcode应用，于是在App Store找到Xcode并安装，然后在终端输入命令<code>xcodebuild -version</code>查看版本，发现又报了一个错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xcodebuild -versionxcode-select: error: tool &apos;xcodebuild&apos; requires Xcode, but active developer directory &apos;/Library/Developer/CommandLineTools&apos; is a command line tools instance</span><br></pre></td></tr></table></figure>
<p>查看系统默认的Xcode路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入命令：xcode-select --print-path</span><br><span class="line"></span><br><span class="line">结果：/Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure>
<p>虽然安装了Xcode，但并不是系统默认位置，所以通过下面命令修改路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># switch后面是安装的Xcode的路径</span><br><span class="line">sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure>
<p>重新执行npm命令，执行通过。</p>
<p>虽然踩了很多坑，但是至少问题解决了不是😊</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用操作</title>
    <url>/2019/12/19/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="防火墙开启端口"><a href="#防火墙开启端口" class="headerlink" title="防火墙开启端口"></a>防火墙开启端口</h3><h4 id="centos6"><a href="#centos6" class="headerlink" title="centos6"></a>centos6</h4><ul>
<li>开启相关端口</li>
</ul>
<blockquote>
<p>/sbin/iptables -I INPUT -p tcp –dport 80 -j ACCEPT</p>
</blockquote>
<blockquote>
<p>/sbin/iptables -I INPUT -p tcp –dport 3306 -j ACCEPT</p>
</blockquote>
<a id="more"></a> 
<ul>
<li>保存配置</li>
</ul>
<blockquote>
<p>/etc/rc.d/init.d/iptables save</p>
</blockquote>
<ul>
<li>重启服务</li>
</ul>
<blockquote>
<p>/etc/rc.d/init.d/iptables restart</p>
</blockquote>
<h4 id="centos7"><a href="#centos7" class="headerlink" title="centos7"></a>centos7</h4><ul>
<li>放开防火墙8888端口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=9090/tcp</span><br></pre></td></tr></table></figure>
<ul>
<li>重启防火墙</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h3 id="卸载mysql"><a href="#卸载mysql" class="headerlink" title="卸载mysql"></a>卸载mysql</h3><ul>
<li>源码安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find / -name mysql</span><br><span class="line">rm -rf 上边查找到的路径，多个路径用空格隔开</span><br><span class="line">#或者下边一条命令即可</span><br><span class="line">find / -name mysql|xargs rm -rf</span><br></pre></td></tr></table></figure>
<ul>
<li>rpm安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 查看</span><br><span class="line">rpm -qa | grep mysql</span><br><span class="line">// 删除</span><br><span class="line">rpm -e mysql　　// 普通删除模式</span><br><span class="line">rpm -e --nodeps mysql　　// 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除</span><br></pre></td></tr></table></figure>
<h3 id="scp免密传输文件"><a href="#scp免密传输文件" class="headerlink" title="scp免密传输文件"></a>scp免密传输文件</h3><ul>
<li>生成配对密钥</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行命令：ssh-keygen -t rsa</span><br><span class="line">过程：一路enter不要输入密码</span><br><span class="line">/root/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? y</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:Izal7G5mpRxGiJ+mMHVZO4keVZuCrqGrHB8z2Qz7E8A root@localhost.localdomain</span><br><span class="line">The key&apos;s randomart image is:</span><br></pre></td></tr></table></figure>
<ul>
<li>将<code>/root/.ssh</code>文件夹下的<code>id_rsa.pub</code>上传到目标服务器的相同路径并重命名为<code>authorized_keys</code></li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp id_rsa.pub root@47.100.168.214:/root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h3><ul>
<li>find命令</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find / -name &apos;findname&apos;</span><br><span class="line">搜索根目录下所有名为findname的文件</span><br></pre></td></tr></table></figure>
<ul>
<li>locate命令</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locate &apos;findname&apos;</span><br></pre></td></tr></table></figure>
<h3 id="Linux查看日志"><a href="#Linux查看日志" class="headerlink" title="Linux查看日志"></a>Linux查看日志</h3><ul>
<li>查看日志： </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常用，显示最后3000行：</span><br><span class="line">cat api.log | tail -n 3000</span><br><span class="line"></span><br><span class="line">linux 如何显示一个文件的某几行(中间几行)</span><br><span class="line"></span><br><span class="line">从第3000行开始，显示1000行。即显示3000~3999行</span><br><span class="line">cat filename | tail -n +3000 | head -n 1000</span><br><span class="line"></span><br><span class="line">显示1000行到3000行</span><br><span class="line">cat filename| head -n 3000 | tail -n +1000</span><br><span class="line"></span><br><span class="line">*注意两种方法的顺序</span><br><span class="line">分解：</span><br><span class="line">tail -n 1000：显示最后1000行</span><br><span class="line">tail -n +1000：从1000行开始显示，显示1000行以后的</span><br><span class="line">head -n 1000：显示前面1000行</span><br><span class="line"></span><br><span class="line">用sed命令</span><br><span class="line">sed -n &apos;5,10p&apos; filename 这样你就可以只查看文件的第5行到第10行。</span><br><span class="line"></span><br><span class="line">例：cat mylog.log | tail -n 1000 #输出mylog.log 文件最后一千行</span><br></pre></td></tr></table></figure>
<ul>
<li>查找指定信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat log.txt | grep &apos;ERROR&apos; -A 5</span><br><span class="line"></span><br><span class="line">意思是，在log.txt文件中，查找ERROR字符，并显示ERROR所在行的之后5行</span><br><span class="line"></span><br><span class="line">cat log.txt | grep &apos;ERROR&apos; -B 5  之前5行</span><br><span class="line"></span><br><span class="line">cat log.txt | grep &apos;ERROR&apos; -C 5 前后5行</span><br><span class="line"></span><br><span class="line">cat log.txt | grep -v &apos;ERROR&apos; 排除ERROR所在的行</span><br></pre></td></tr></table></figure>
<h3 id="linux公钥免密码登录"><a href="#linux公钥免密码登录" class="headerlink" title="linux公钥免密码登录"></a>linux公钥免密码登录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa获得id_rsa、id_rsa.pub</span><br><span class="line">将.pub文件中公钥复制到服务器的/root/.ssh文件夹中的authorized_keys文件中</span><br></pre></td></tr></table></figure>
<h2 id="nginx常用操作"><a href="#nginx常用操作" class="headerlink" title="nginx常用操作"></a>nginx常用操作</h2><blockquote>
<p>待完善</p>
</blockquote>
<h2 id="别名启动-sh脚本"><a href="#别名启动-sh脚本" class="headerlink" title="别名启动.sh脚本"></a>别名启动.sh脚本</h2><ul>
<li>1、~路径下新增文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure>
<ul>
<li>2、编辑</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi .bash_profile</span><br></pre></td></tr></table></figure>
<ul>
<li>3、写入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ssh管理脚本</span><br><span class="line">alias so=/Users/tang/source/so/so.sh</span><br></pre></td></tr></table></figure>
<h2 id="scp命令"><a href="#scp命令" class="headerlink" title="scp命令"></a>scp命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从服务器下载整个文件夹到指定服务器文件夹</span><br><span class="line">scp -r root@47.101.184.179:/home/mins-test/cloud/qrcode Downloads/</span><br></pre></td></tr></table></figure>
<h2 id="查看最近登录的几个用户"><a href="#查看最近登录的几个用户" class="headerlink" title="查看最近登录的几个用户"></a>查看最近登录的几个用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">last -n 100|awk &apos;&#123;print $1&quot;\t&quot;$3&#125;&apos;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH框架-基于annotation的ssh框架整合配置</title>
    <url>/2019/03/22/SSH%E6%A1%86%E6%9E%B6-annotation%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文简单的记录了基于annotation进行ssh框架整合配置；</p>
<h3 id="需要的配置文件"><a href="#需要的配置文件" class="headerlink" title="需要的配置文件"></a>需要的配置文件</h3><blockquote>
<p>Strtsu2框架：src/strtus.xml<br>Spring框架：src/applicationContext.xml<br>关于日志：log4j.properties<br>关于数据库连接：db.properties</p>
</blockquote>
<a id="more"></a> 
<h3 id="web-xml配置-同基于xml的配置"><a href="#web-xml配置-同基于xml的配置" class="headerlink" title="web.xml配置(同基于xml的配置)"></a>web.xml配置(同基于xml的配置)</h3><h3 id="domain下bean的注解配置"><a href="#domain下bean的注解配置" class="headerlink" title="domain下bean的注解配置"></a>domain下bean的注解配置</h3><ul>
<li>@Entity：定义实体类</li>
<li>@Table：定义表</li>
<li>@Id：主键</li>
<li>@GeneratedValue：注解生成策略</li>
<li>@Column：定义列(可以省略)</li>
</ul>
<h3 id="整合hibernate"><a href="#整合hibernate" class="headerlink" title="整合hibernate"></a>整合hibernate</h3><p>applicationContext.xml进行配置</p>
<p>1、需要引入<code>db.properties</code>文件，并且数据库相关信息都在<code>db.properties</code>文件中进行配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部 的properties文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>2、配置连接池<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建c3p0连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c3p0DataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>3、开启注解扫描<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>4、配置sessionFactory</p>
<ol>
<li>加载上述步骤配置的连接池</li>
<li>配置hibernateProperties</li>
<li>加载注解类<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"c3p0DataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">			hibernate.show_sql=true</span><br><span class="line">			hibernate.format_sql=true</span><br><span class="line">			hibernate.dialect=org.hibernate.dialect.MySQLDialect</span><br><span class="line">			hibernate.hbm2ddl.auto=update</span><br><span class="line">		<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 加载注解类 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>com.itheima.domain<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>5、声明事务管理器<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>6、加载事务注解驱动<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>bean的注册<br>@Component：不确定位置<br>@Rpository：用于DAO层<br>@Service：用于service层<br>@Controller：用于表现层</p>
</blockquote>
<h3 id="dao注解配置"><a href="#dao注解配置" class="headerlink" title="dao注解配置"></a>dao注解配置</h3><p>a、@Repository(“userDao”)：注册bean</p>
<p>b、注入sessionFactory<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"sessionFactory"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuperSessionFactory</span><span class="params">(SessionFactory sessionFactory)</span></span>&#123;</span><br><span class="line">	<span class="keyword">super</span>.setSessionFactory(sessionFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="service注解配置"><a href="#service注解配置" class="headerlink" title="service注解配置"></a>service注解配置</h3><p>a、@Service(“userService”)：注册bean    // 注意：要定义名字，否则在action注入时可能报错</p>
<p>b、@Transactional：开启事务</p>
<p>c、注入dao：需要提供set方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注入userDao</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(IUserDao userDao)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="action注解配置"><a href="#action注解配置" class="headerlink" title="action注解配置"></a>action注解配置</h3><p>注意：</p>
<blockquote>
<p>1.需要struts2-spring-plugin.jar<br>2.action类需要继承<code>ActionSupport</code>;<br>3.数据封装：实现<code>ModelDriven&lt;T&gt;</code>接口并提供实例化bean对象</p>
</blockquote>
<p>1、类上基本配置<br>    @Controller<br>    @Scope(“prototype”)<br>    @Namespace(“/“)<br>    @ParentPackage(“struts-default”)</p>
<p>2、service注入<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">private</span> IUserService userService;</span><br></pre></td></tr></table></figure></p>
<p>3、配置action<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Action</span>(value=<span class="string">"user_add"</span>,results=&#123;<span class="meta">@Result</span>(name=<span class="string">"success"</span>,location=<span class="string">"/success.jsp"</span>)&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	userService.add(user);</span><br><span class="line">	<span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="延迟加载的问题"><a href="#延迟加载的问题" class="headerlink" title="延迟加载的问题"></a>延迟加载的问题</h3><p>在web.xml中配置openSessionInViewFilter<br>注意:openSessionInViewFilter一定要在Struts2 Filter前配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- openSessionInViewFilter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSessionInView<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSessionInView<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>框架    &lt;!--只能有一个分类--&gt;</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH框架-基于xml的ssh框架整合配置</title>
    <url>/2019/03/22/SSH%E6%A1%86%E6%9E%B6-xml%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>学习过程中记录了基于xml的ssh框架整合的一些简单配置</p>
<h3 id="需要的配置文件"><a href="#需要的配置文件" class="headerlink" title="需要的配置文件"></a>需要的配置文件</h3><blockquote>
<p>Strtsu2框架：src/strtus.xml<br>Hibernate框架：src/hibernate.cfg.xml；在domain有 Xxx.hbm.xml<br>Spring框架：src/applicationContext.xml<br>关于日志：log4j.properties<br>关于数据库连接：db.properties</p>
</blockquote>
<a id="more"></a> 
<h3 id="web-xml配置-必须"><a href="#web-xml配置-必须" class="headerlink" title="web.xml配置(必须)"></a>web.xml配置(必须)</h3><h4 id="配置spring监听器及指定配置文件位置"><a href="#配置spring监听器及指定配置文件位置" class="headerlink" title="配置spring监听器及指定配置文件位置"></a>配置spring监听器及指定配置文件位置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置spring的监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定spring框架配置文件所在位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="配置struts2的filter"><a href="#配置struts2的filter" class="headerlink" title="配置struts2的filter"></a>配置struts2的filter</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置structs2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="spring整合hibernate"><a href="#spring整合hibernate" class="headerlink" title="spring整合hibernate"></a>spring整合hibernate</h3><h4 id="方式一：零障碍整合"><a href="#方式一：零障碍整合" class="headerlink" title="方式一：零障碍整合"></a>方式一：零障碍整合</h4><p>注意：需要hibernate.cfg.xml配置文件，引用时根据需求变动处为：1.配置数据库相关信息；2.mapping标签映射实体类<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:hibernate.cfg.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="方式二：spring管理hibernate配置-建议使用"><a href="#方式二：spring管理hibernate配置-建议使用" class="headerlink" title="方式二：spring管理hibernate配置(建议使用)"></a>方式二：spring管理hibernate配置(建议使用)</h4><blockquote>
<p>该方式不需要hibernate.cfg.xml文件，所有关于hibernate.cfg.xml文件中的配置都在spring的配置文件中来配置<br>详细配置见applicationContext.xml文件</p>
</blockquote>
<p>==注意：==</p>
<p>1、需要引入<code>db.properties</code>文件，并且数据库相关信息都在<code>db.properties</code>文件中进行配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部 的properties文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>2、配置连接池<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建c3p0连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c3p0DataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>3、配置<code>sessionFactory</code></p>
<ol>
<li>加载上述步骤配置的连接池</li>
<li>配置hibernateProperties</li>
<li>加载domain下的<code>类名.hbm.xml</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 加载连接池 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"c3p0DataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">			hibernate.show_sql=true</span><br><span class="line">			hibernate.format_sql=true</span><br><span class="line">			<span class="comment">&lt;!-- hibernate的方言，必须配置 --&gt;</span></span><br><span class="line">			hibernate.dialect=org.hibernate.dialect.MySQLDialect</span><br><span class="line">			hibernate.hbm2ddl.auto=update</span><br><span class="line">		<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 加载hibernate的Xxx.hbm.xml配置文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingResources"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>com/itheima/domain/User.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>4、声明dao<br>==注意==：dao需要继承<code>HibernateDaoSupport</code>类，此时注入<code>sessionFactory</code>才可以获得<code>HibernateTemplate</code>进行数据持久化操作<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明UserDao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.UserDaoImpl"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 注入sessionFactory --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>5、声明service<br>==service类中需要提供dao的set方法以便dao的注入==<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>6、事务管理<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 声明切点 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.itheima.service.*..*(..))"</span> <span class="attr">id</span>=<span class="string">"myPointcut"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Spring整合struts2框架"><a href="#Spring整合struts2框架" class="headerlink" title="Spring整合struts2框架"></a>Spring整合struts2框架</h3><p>注意：</p>
<blockquote>
<p>1.需要struts2-spring-plugin.jar<br>2.action类需要继承<code>ActionSupport</code>;<br>3.数据封装：实现<code>ModelDriven&lt;T&gt;</code>接口并提供实例化bean对象</p>
</blockquote>
<p>配置struts.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"user_*"</span> <span class="attr">class</span>=<span class="string">"userAction"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="方式一：spring管理action-建议使用"><a href="#方式一：spring管理action-建议使用" class="headerlink" title="方式一：spring管理action(建议使用)"></a>方式一：spring管理action(建议使用)</h4><p>1、<code>applicationContext.xml</code>中配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"com.itheima.action.UserAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>2、action类中需要提供service的set方法以便service的注入</p>
<p>3、上述struts.xml中action标签中class的配置使用bean中的id</p>
<p>4、这种方式必须配置<code>scope=&quot;prototype&quot;</code>，因为action是多例的</p>
<h4 id="方式二：action自动注入service"><a href="#方式二：action自动注入service" class="headerlink" title="方式二：action自动注入service"></a>方式二：action自动注入service</h4><p>applicationContext.xml中不需要配置action标签，struts.xml文件中class使用全类名，此时使用自动注入方案</p>
<h3 id="延迟加载的问题"><a href="#延迟加载的问题" class="headerlink" title="延迟加载的问题"></a>延迟加载的问题</h3><p>在web.xml中配置openSessionInViewFilter<br>注意:openSessionInViewFilter一定要在Struts2 Filter前配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- openSessionInViewFilter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSessionInView<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSessionInView<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>框架    &lt;!--只能有一个分类--&gt;</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter压力测试</title>
    <url>/2018/12/14/Jmeter%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="jmeter压力测试"><a href="#jmeter压力测试" class="headerlink" title="jmeter压力测试"></a>jmeter压力测试</h2><blockquote>
<p>注意：需在安装jdk的环境下操作</p>
</blockquote>
<p>Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 </p>
<a id="more"></a> 
<h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><ul>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install jmeter</span><br><span class="line"></span><br><span class="line">路径：/usr/local/Cellar/jmeter/5.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open /usr/local/bin/jmeter</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><ul>
<li><p>下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/jmeter/binaries" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache/jmeter/binaries</a></p>
</li>
<li><p>安装：直接将下载好的zip压缩包进行解压即可。</p>
</li>
<li>启动：进入bin目录，找到jmeter.bat文件，双机打开即可启动。</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1、修改主题和语言"><a href="#1、修改主题和语言" class="headerlink" title="1、修改主题和语言"></a>1、修改主题和语言</h4><p>默认的语言是英语，这样不太方便使用，所以需要修改下中文语言。</p>
<p>通过【Options】-&gt; 【Choose Language】变更简体中文</p>
<p><img src="/images/jmeter/update language.png" alt="update language"></p>
<p>中文简体语言修改完成。 </p>
<h4 id="2、创建首页的测试用例"><a href="#2、创建首页的测试用例" class="headerlink" title="2、创建首页的测试用例"></a>2、创建首页的测试用例</h4><p>第一步：保存测试用例</p>
<p><img src="/images/jmeter/save.png" alt="save jmx"></p>
<p>第二步：添加线程组，使用线程模拟用户的并发</p>
<p><img src="/images/jmeter/create thread.png" alt="create thread"></p>
<p><img src="/images/jmeter/set thread.png" alt="set thread"></p>
<p>1000个线程，每个线程循环10次，也就是tomcat会接收到10000个请求。</p>
<p>第三步：添加http请求，并设置相关端口、请求路径及参数</p>
<p><img src="/images/jmeter/add req.png" alt="add req"></p>
<p><img src="/images/jmeter/set req.png" alt="set req"></p>
<p>第四步：添加查看结果树，与用表格查看结果</p>
<p><img src="/images/jmeter/add result.png" alt="add result"></p>
<p><img src="/images/jmeter/check by excel.png" alt="check by excel"></p>
<h4 id="3、启动、进行测试"><a href="#3、启动、进行测试" class="headerlink" title="3、启动、进行测试"></a>3、启动、进行测试</h4><p>注意：启动时终端提示不要使用图形化界面执行测试计划，需要在终端使用命令执行</p>
<blockquote>
<p>Don’t use GUI mode for load testing !, only for Test creation and Test debugging.</p>
<p>For load testing, use CLI Mode (was NON GUI):</p>
<p>  jmeter -n -t [jmx file] -l [results file] -e -o [Path to web report folder]</p>
<p>&amp; increase Java Heap to meet your test requirements:</p>
<p>  Modify current env variable HEAP=”-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m” in the jmeter batch file</p>
<p>Check : <a href="https://jmeter.apache.org/usermanual/best-practices.html" target="_blank" rel="noopener">https://jmeter.apache.org/usermanual/best-practices.html</a></p>
</blockquote>
<p>执行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jmeter -n -t SendMessage.jmx -l jmeter/result.txt -e -o jmeter/</span><br><span class="line"></span><br><span class="line"><span class="comment"># SendMessage.jmx 测试文件路径</span></span><br><span class="line"><span class="comment"># jmeter/result.txt 测试结果文件路径</span></span><br><span class="line"><span class="comment"># jmeter/ web报告保存路径</span></span><br></pre></td></tr></table></figure>
<p>命令执行结束后在指定路径会出现对应的报告，打开index.html可查看报告</p>
<p><img src="/images/jmeter/report1.png" alt="report1"></p>
<h4 id="4、查看web报告"><a href="#4、查看web报告" class="headerlink" title="4、查看web报告"></a>4、查看web报告</h4><p><img src="/images/jmeter/report2.png" alt="report2"></p>
]]></content>
      <categories>
        <category>性能</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的加密算法-MD5、SHA</title>
    <url>/2018/09/02/%E7%AE%80%E5%8D%95%E7%9A%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-MD5%E3%80%81SHA/</url>
    <content><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>简单的介绍常用的两个算法及代码实现</p>
<h3 id="MD5算法"><a href="#MD5算法" class="headerlink" title="MD5算法"></a>MD5算法</h3><p><strong>MD5消息摘要算法</strong>（英语：MD5 Message-Digest Algorithm），一种被广泛使用的<a href="https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">密码散列函数</a>，可以产生出一个128位16字节的散列值（hash value），用于确保信息传输完整一致。 摘自<a href="https://baike.baidu.com/item/MD5/212708?fromtitle=MD5算法&amp;fromid=174909&amp;fr=aladdin" target="_blank" rel="noopener">百度百科</a></p>
<a id="more"></a> 
<h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>MD5算法因其不可逆的设计，理论上是不可破解的，但是某些网站将常用密码经md5算法加密后存储到数据库中进行匹配，从而实现事实上的破解。所以现在大多数网站强制用户使用数字大小写字母等复杂组合密码，以此提高用户密码的安全性。</p>
<h4 id="java代码实现"><a href="#java代码实现" class="headerlink" title="java代码实现"></a>java代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.SortedMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MD5加密工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建md5摘要,规则是:按参数名称a-z排序,遇到空值的参数不参加签名。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createSign</span><span class="params">(SortedMap&lt;String, String&gt; packageParams,</span></span></span><br><span class="line"><span class="function"><span class="params">			String appid, String key)</span> </span>&#123;</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		Set es = packageParams.entrySet();</span><br><span class="line">		Iterator it = es.iterator();</span><br><span class="line">		<span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">			Map.Entry entry = (Map.Entry) it.next();</span><br><span class="line">			String k = (String) entry.getKey();</span><br><span class="line">			String v = (String) entry.getValue();</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">null</span> != v &amp;&amp; !<span class="string">""</span>.equals(v) &amp;&amp; !<span class="string">"sign"</span>.equals(k)</span><br><span class="line">					&amp;&amp; !<span class="string">"key"</span>.equals(k)) &#123;</span><br><span class="line">				sb.append(k + <span class="string">"="</span> + v + <span class="string">"&amp;"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		sb.append(<span class="string">"key="</span> + key);</span><br><span class="line">		String sign = MD5Encode(sb.toString(), <span class="string">"UTF-8"</span>).toUpperCase();</span><br><span class="line">		<span class="keyword">return</span> sign;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteArrayToHexString</span><span class="params">(<span class="keyword">byte</span> b[])</span> </span>&#123;</span><br><span class="line">		StringBuffer resultSb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++)</span><br><span class="line">			resultSb.append(byteToHexString(b[i]));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> resultSb.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteToHexString</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n = b;</span><br><span class="line">		<span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">			n += <span class="number">256</span>;</span><br><span class="line">		<span class="keyword">int</span> d1 = n / <span class="number">16</span>;</span><br><span class="line">		<span class="keyword">int</span> d2 = n % <span class="number">16</span>;</span><br><span class="line">		<span class="keyword">return</span> hexDigits[d1] + hexDigits[d2];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">MD5Encode</span><span class="params">(String origin, String charsetname)</span> </span>&#123;</span><br><span class="line">		String resultString = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			resultString = <span class="keyword">new</span> String(origin);</span><br><span class="line">			MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">			<span class="keyword">if</span> (charsetname == <span class="keyword">null</span> || <span class="string">""</span>.equals(charsetname))</span><br><span class="line">				resultString = byteArrayToHexString(md.digest(resultString</span><br><span class="line">						.getBytes()));</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				resultString = byteArrayToHexString(md.digest(resultString</span><br><span class="line">						.getBytes(charsetname)));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> resultString;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String hexDigits[] = &#123; <span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>,</span><br><span class="line">			<span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SHA算法"><a href="#SHA算法" class="headerlink" title="SHA算法"></a>SHA算法</h3><p><strong>安全散列算法</strong>（英语：Secure Hash Algorithm，缩写为SHA）是一个<a href="https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">密码散列函数</a>家族，是<a href="https://baike.baidu.com/item/FIPS" target="_blank" rel="noopener">FIPS</a>所认证的安全<a href="https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">散列算法</a>。能计算出一个数字消息所对应到的，长度固定的字符串（又称消息摘要）的算法。且若输入的消息不同，它们对应到不同字符串的机率很高 。</p>
<h4 id="java代码实现-1"><a href="#java代码实现-1" class="headerlink" title="java代码实现"></a>java代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.SortedMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SHA1算法工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sha1Util</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// api说明： createSHA1Sign创建签名SHA1 getSha1()Sha1签名</span></span><br><span class="line">	<span class="comment">// 创建签名SHA1</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createSHA1Sign</span><span class="params">(SortedMap&lt;String, String&gt; signParams)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		Set es = signParams.entrySet();</span><br><span class="line">		Iterator it = es.iterator();</span><br><span class="line">		<span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">			Map.Entry entry = (Map.Entry) it.next();</span><br><span class="line">			String k = (String) entry.getKey();</span><br><span class="line">			String v = (String) entry.getValue();</span><br><span class="line">			sb.append(k + <span class="string">"="</span> + v + <span class="string">"&amp;"</span>);</span><br><span class="line">			<span class="comment">// 要采用URLENCODER的原始值！</span></span><br><span class="line">		&#125;</span><br><span class="line">		String params = sb.substring(<span class="number">0</span>, sb.lastIndexOf(<span class="string">"&amp;"</span>));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> getSha1(params);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Sha1签名</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSha1</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">char</span> hexDigits[] = &#123; <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span> &#125;;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			MessageDigest mdTemp = MessageDigest.getInstance(<span class="string">"SHA1"</span>);</span><br><span class="line">			mdTemp.update(str.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">			<span class="keyword">byte</span>[] md = mdTemp.digest();</span><br><span class="line">			<span class="keyword">int</span> j = md.length;</span><br><span class="line">			<span class="keyword">char</span> buf[] = <span class="keyword">new</span> <span class="keyword">char</span>[j * <span class="number">2</span>];</span><br><span class="line">			<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">				<span class="keyword">byte</span> byte0 = md[i];</span><br><span class="line">				buf[k++] = hexDigits[byte0 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">				buf[k++] = hexDigits[byte0 &amp; <span class="number">0xf</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> String(buf);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><p>代码摘自CSDN博客。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>md5</tag>
        <tag>sha1</tag>
      </tags>
  </entry>
</search>
